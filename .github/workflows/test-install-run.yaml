name: Test Charts (Run)

on:
  workflow_run:
    workflows: ["Test Charts (Check)"]
    types:
      - completed
  # Also allow manual triggering for maintainers
  workflow_dispatch:

# Limit permissions to only what's needed
permissions:
  contents: read
  pull-requests: write  # Needed to comment on PR results


jobs:
  check-workflow-result:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      pr_number: ${{ steps.get-pr-info.outputs.pr_number }}
      pr_head_sha: ${{ steps.get-pr-info.outputs.pr_head_sha }}
      pr_head_ref: ${{ steps.get-pr-info.outputs.pr_head_ref }}
      pr_base_ref: ${{ steps.get-pr-info.outputs.pr_base_ref }}
      changed: ${{ steps.get-pr-info.outputs.changed }}
      
    steps:
      - name: Get PR information
        id: get-pr-info
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get the PR number from the triggering workflow
            const allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner,
              repo,
              run_id: context.payload.workflow_run.id
            });
            
            // Find the artifact that contains the PR info
            const matchArtifact = allArtifacts.data.artifacts.find(artifact => 
              artifact.name === "pr-info"
            );
            
            if (!matchArtifact) {
              console.log('No PR info artifact found. This may be a direct push to main.');
              return;
            }
            
            // Download the artifact
            const download = await github.rest.actions.downloadArtifact({
              owner,
              repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip'
            });
            
            // Extract the PR info
            const fs = require('fs');
            const AdmZip = require('adm-zip');
            const zip = new AdmZip(Buffer.from(download.data));
            
            zip.extractAllTo('artifact', true);
            const prInfoContent = fs.readFileSync('artifact/pr-info.json', 'utf8');
            const prInfo = JSON.parse(prInfoContent);
            
            // Set outputs
            core.setOutput('pr_number', prInfo.number);
            core.setOutput('pr_head_sha', prInfo.head_sha);
            core.setOutput('pr_head_ref', prInfo.head_ref);
            core.setOutput('pr_base_ref', prInfo.base_ref);
            core.setOutput('changed', prInfo.changed);
            
            console.log(`PR #${prInfo.number} from ${prInfo.head_ref} to ${prInfo.base_ref}`);
            console.log(`Changed: ${prInfo.changed}`);

  test-install:
    needs: check-workflow-result
    if: needs.check-workflow-result.outputs.changed == 'true'
    runs-on: ubuntu-8
    # To enable required approvals:
    # 1. Create an environment named 'chart-testing' in repository settings
    # 2. Configure required reviewers for the environment
    # 3. Uncomment the environment configuration below:
    #
    # environment:
    #   name: chart-testing
    #   url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use the PR head SHA
          ref: ${{ needs.check-workflow-result.outputs.pr_head_sha }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.0

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Create kind cluster
        uses: helm/kind-action@v1.9.0

      - name: Check if PR is from a fork
        id: check-fork
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "is_fork=false" >> "$GITHUB_OUTPUT"
          else
            # Get PR details using GitHub API
            PR_NUMBER="${{ needs.check-workflow-result.outputs.pr_number }}"
            PR_INFO=$(curl -s -H "Authorization: token ${{ github.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}")
            
            IS_FORK=$(echo "$PR_INFO" | jq -r '.head.repo.fork')
            echo "is_fork=${IS_FORK}" >> "$GITHUB_OUTPUT"
          fi

      - name: Prepare CI secrets for Helm as a single quoted string
        if: steps.check-fork.outputs.is_fork == 'false'
        env:
          CI_TEST_ACCOUNT_PRIVATE_KEY: ${{ secrets.CI_TEST_ACCOUNT_PRIVATE_KEY }}
          CI_PARENT_CHAIN_URL_SEPOLIA: ${{ secrets.CI_PARENT_CHAIN_URL_SEPOLIA }}
          CI_BASELINE_RPC_KEY_SEPOLIA: ${{ secrets.CI_BASELINE_RPC_KEY_SEPOLIA }}
          CI_PARENT_CHAIN_BLOB_CLIENT_URL: ${{ secrets.CI_PARENT_CHAIN_BLOB_CLIENT_URL }}
          # Map additional secrets as needed
        run: |
          secrets_for_helm=""
          # Capture all 'CI_' prefixed environment variables into an array
          IFS=$'\n' read -r -d '' -a secret_names < <(env | grep '^CI_' | sed 's/=.*//' && printf '\0')
          
          for secret_name in "${secret_names[@]}"; do
            # Extract the variable name without the CI_ prefix for Helm values
            variable_name=$(echo $secret_name | sed 's/^CI_//')
            # Get the value of the dynamic variable name
            secret_value=${!secret_name}
            # Append to the secrets string in the required format
            if [ -z "$secrets_for_helm" ]; then
              secrets_for_helm="ci.secrets.${variable_name}=${secret_value}"
            else
              secrets_for_helm="${secrets_for_helm},ci.secrets.${variable_name}=${secret_value}"
            fi
          done
          
          # Remove the initial comma to clean up the format
          secrets_for_helm=${secrets_for_helm#,}
          
          # Format the entire string for --helm-extra-set-args, ensuring it's properly quoted
          helm_extra_set_args="--set ${secrets_for_helm}"

          # Use the command directly or set the HELM_EXTRA_SET_ARGS environment variable for later use in the workflow
          echo "HELM_EXTRA_SET_ARGS=${helm_extra_set_args}" >> $GITHUB_ENV
        
      - name: Run chart-testing (install)
        run: |
          if [[ "${{ steps.check-fork.outputs.is_fork }}" == "true" ]]; then
            # For fork PRs, run without secrets
            ct install --target-branch ${{ needs.check-workflow-result.outputs.pr_base_ref }} --config ct.yaml
          else
            # For internal PRs, run with secrets
            ct install --target-branch ${{ needs.check-workflow-result.outputs.pr_base_ref }} --config ct.yaml --helm-extra-set-args "$HELM_EXTRA_SET_ARGS"
          fi

      - name: Update PR with test results
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr_number = ${{ needs.check-workflow-result.outputs.pr_number }};
            
            if (!pr_number) {
              console.log('No PR number found. Skipping comment.');
              return;
            }
            
            const workflow_run_url = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
            
            let status_icon = '✅';
            let status_text = 'succeeded';
            
            if (context.job.status !== 'success') {
              status_icon = '❌';
              status_text = 'failed';
            }
            
            const message = `## Chart Installation Test ${status_text} ${status_icon}
            
            The chart installation test has ${status_text}. [View workflow run](${workflow_run_url})
            
            ${context.job.status !== 'success' ? '⚠️ Please check the workflow logs for details on the failure.' : ''}`;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: message
            });
