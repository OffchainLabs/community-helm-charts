apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "das.fullname" . }}
  labels:
    {{- include "das.labels" . | nindent 4 }}
spec:
  serviceName: "{{ include "das.fullname" . }}"
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "das.selectorLabels" . | nindent 6 }}
  podManagementPolicy: Parallel
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "das.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "das.serviceAccountName" . }}
      securityContext:
        {{- with .Values.podSecurityContext }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
      initContainers:
      {{- if .Values.initContainers }}
        {{- toYaml .Values.initContainers | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.diagnosticMode }}
          command: ["sleep"]
          args: ["infinity"]
          {{- else if .Values.commandOverride.enabled }}
          {{- with .Values.commandOverride.command }}
          command: {{- toYaml . | nindent 8}}
          {{- end }}
          {{- with .Values.commandOverride.args }}
          args: {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- else }}
          command: [/usr/local/bin/daserver]
          args:
            {{- if .Values.configmap.data.metrics}}
            - --metrics
            {{- end }}
            {{- if .Values.configmap.enabled }}
            - --conf.file=/config/config.json
            {{- end }}
            {{- if index .Values "configmap" "data" "data-availability" "syncstate-storage" "enable" }}
            - --data-availability.rest-aggregator.sync-to-storage.eager: true
            - --data-availability.rest-aggregator.sync-to-storage.state-dir: {{ index .Values "configmap" "data" "data-availability" "syncstate-storage" "data-dir" }}
            - --data-availability.rest-aggregator.sync-to-storage.eager-lower-bound-block: 15025611
            {{- end }}
            {{- range $key, $value := .Values.customArgs }}
            - --{{ $key }}={{ $value | quote }}
            {{- end }}
          ports:
            {{- if and .Values.configmap.data.http .Values.configmap.data.http.port}}
            - name: http-rpc
              containerPort: {{ .Values.configmap.data.http.port }}
              protocol: TCP
            {{- end }}
            {{- if and .Values.configmap.data.ws .Values.configmap.data.ws.port }}
            - name: ws
              containerPort: {{ .Values.configmap.data.ws.port }}
              protocol: TCP
            {{- end }}
            {{- if .Values.configmap.data.metrics }}
            - name: metrics
              containerPort: {{ index .Values "configmap" "data" "metrics-server" "port" }}
              protocol: TCP
            {{- end }}
            {{- if  .Values.configmap.data.pprof }}
            - name: pprof
              containerPort: {{ index .Values "configmap" "data" "pprof-cfg" "port" }}
              protocol: TCP
            {{- end }}
            {{- if and .Values.configmap.data.node .Values.configmap.data.node.feed .Values.configmap.data.node.feed.output .Values.configmap.data.node.feed.output.port }}
            - name: feed
              containerPort: {{ .Values.configmap.data.node.feed.output.port }}
              protocol: TCP
            {{- end }}
            {{- if index .Values.configmap.data "enable-rest" }}
            - name: http-rest
              containerPort: {{ index .Values.configmap.data "rest-port"}}
              protocol: TCP
            {{- end }}
            {{- if index .Values.configmap.data "enable-rpc" }}
            - name: http-rpc
              containerPort: {{ index .Values.configmap.data "rpc-port"}}
              protocol: TCP
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- with .Values.livenessProbe }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
            {{- end }}
            {{- if and (not (index .Values.configmap.data "enable-rpc")) (index .Values.configmap.data "enable-rest") }}
            httpGet:
              path: /health
              port: {{ index .Values.configmap.data "rest-port" }}
            {{- else }}
            exec:
              command:
                - "bash"
                - "-c"
                - |
                  {{- include "livenessProbe" . | nindent 18 }}
            {{- end }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- with .Values.readinessProbe }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
            {{- end }}
            {{- if and (not (index .Values.configmap.data "enable-rpc")) (index .Values.configmap.data "enable-rest") }}
            httpGet:
              path: /health
              port: {{ index .Values.configmap.data "rest-port" }}
            {{- else }}
            exec:
              command:
                - "bash"
                - "-c"
                - |
                  {{- include "readinessProbe" . | nindent 18 }}
            {{- end }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            {{- with .Values.startupProbe }}
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
            {{- end }}
            {{- if and (not (index .Values.configmap.data "enable-rpc")) (index .Values.configmap.data "enable-rest") }}
            httpGet:
              path: /health
              port: {{ index .Values.configmap.data "rest-port" }}
            {{- else }}
            exec:
              command:
                - "bash"
                - "-c"
                - |
                  {{- include "startupProbe" . | nindent 18 }}
            {{- end }}
          {{- end }}
          env:
          {{- with .Values.extraEnv }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- end }}
          volumeMounts:
          {{- if index .Values "configmap" "data" "data-availability" "local-db-storage" "enable" }}
          - name: localdbstorage
            mountPath: {{ index .Values "configmap" "data" "data-availability" "local-db-storage" "data-dir" }}
          {{- end }}
          {{- if index .Values "configmap" "data" "data-availability" "local-file-storage" "enable" }}
          - name: localfilestorage
            mountPath: {{ index .Values "configmap" "data" "data-availability" "local-file-storage" "data-dir" }}
          {{- end }}
          {{- if index .Values "configmap" "data" "data-availability" "syncstate-storage" "enable" }}
          - name: syncstatestorage
            mountPath: {{ index .Values "configmap" "data" "data-availability" "syncstate-storage" "data-dir" }}
          {{- end }}
          {{- if and (index .Values "configmap" "data" "data-availability" "key") (index .Values "configmap" "data" "data-availability" "key" "key-dir") }}
          - name: keydir
            mountPath: {{ index .Values "configmap" "data" "data-availability" "key" "key-dir" }}
            readOnly: true
          {{- end }}
          {{- if .Values.configmap.enabled }}
          - name: config
            mountPath: /config/
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          {{- toYaml .Values.extraVolumeMounts | nindent 8}}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
      {{- if .Values.configmap.enabled }}
      - name: config
        configMap:
          name: {{ include "das.fullname" . }}
      {{- end }}
      {{- if and (index .Values "configmap" "data" "data-availability" "key") (index .Values "configmap" "data" "data-availability" "key" "key-dir") }}
      - name: keydir
        secret:
          secretName: {{ .Values.dasecretName }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default 600 }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    {{- if index .Values "configmap" "data" "data-availability" "local-db-storage" "enable" }}
    - metadata:
        name: localdbstorage
        {{- with .Values.storageAnnotations }}
        annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
        labels:
          app: {{ template "das.name" . }}
          release: {{ .Release.Name }}
          heritage: {{ .Release.Service }}
      spec:
        accessModes:
        - "ReadWriteOnce"
        {{- if .Values.persistence.localdbstorage.storageClassName }}
        storageClassName: {{ .Values.persistence.localdbstorage.storageClassName | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.localdbstorage.size | quote }}
    {{- end }}
    {{- if index .Values "configmap" "data" "data-availability" "local-file-storage" "enable" }}
    - metadata:
        name: localfilestorage
        {{- with .Values.storageAnnotations }}
        annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
        labels:
          app: {{ template "das.name" . }}
          release: {{ .Release.Name }}
          heritage: {{ .Release.Service }}
      spec:
        accessModes:
        - "ReadWriteOnce"
        {{- if .Values.persistence.localfilestorage.storageClassName }}
        storageClassName: {{ .Values.persistence.localfilestorage.storageClassName | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.localfilestorage.size | quote }}
      {{- end }}
    {{- if index .Values "configmap" "data" "data-availability" "syncstate-storage" "enable" }}
    - metadata:
        name: syncstatestorage
        {{- with .Values.storageAnnotations }}
        annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
        labels:
          app: {{ template "das.name" . }}
          release: {{ .Release.Name }}
          heritage: {{ .Release.Service }}
      spec:
        accessModes:
        - "ReadWriteOnce"
        {{- if .Values.persistence.syncstorage.storageClassName }}
        storageClassName: {{ .Values.persistence.syncstorage.storageClassName | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.syncstorage.size | quote }}
      {{- end }}
